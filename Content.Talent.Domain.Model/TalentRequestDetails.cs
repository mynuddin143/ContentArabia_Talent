/*
 *  CAPD 1 - Talent Registration
 *
 * This document contains the specification of the Talent Registration API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// sends the entire Talent Registration model
    /// </summary>
    [DataContract]
    public partial class TalentRequestDetails : IEquatable<TalentRequestDetails>
    { 
        /// <summary>
        /// Gets or Sets ConatctDetails
        /// </summary>
        [DataMember(Name="ConatctDetails")]
        public ConatctDetails ConatctDetails { get; set; }

        /// <summary>
        /// Gets or Sets BioDetails
        /// </summary>
        [DataMember(Name="BioDetails")]
        public BioDetails BioDetails { get; set; }

        /// <summary>
        /// Gets or Sets SocialDetails
        /// </summary>
        [DataMember(Name="SocialDetails")]
        public SocialDetails SocialDetails { get; set; }

        /// <summary>
        /// Gets or Sets ProjectDetails
        /// </summary>
        [DataMember(Name="ProjectDetails")]
        public ProjectDetails ProjectDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TalentRequestDetails {\n");
            sb.Append("  ConatctDetails: ").Append(ConatctDetails).Append("\n");
            sb.Append("  BioDetails: ").Append(BioDetails).Append("\n");
            sb.Append("  SocialDetails: ").Append(SocialDetails).Append("\n");
            sb.Append("  ProjectDetails: ").Append(ProjectDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TalentRequestDetails)obj);
        }

        /// <summary>
        /// Returns true if TalentRequestDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of TalentRequestDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TalentRequestDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConatctDetails == other.ConatctDetails ||
                    ConatctDetails != null &&
                    ConatctDetails.Equals(other.ConatctDetails)
                ) && 
                (
                    BioDetails == other.BioDetails ||
                    BioDetails != null &&
                    BioDetails.Equals(other.BioDetails)
                ) && 
                (
                    SocialDetails == other.SocialDetails ||
                    SocialDetails != null &&
                    SocialDetails.Equals(other.SocialDetails)
                ) && 
                (
                    ProjectDetails == other.ProjectDetails ||
                    ProjectDetails != null &&
                    ProjectDetails.Equals(other.ProjectDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConatctDetails != null)
                    hashCode = hashCode * 59 + ConatctDetails.GetHashCode();
                    if (BioDetails != null)
                    hashCode = hashCode * 59 + BioDetails.GetHashCode();
                    if (SocialDetails != null)
                    hashCode = hashCode * 59 + SocialDetails.GetHashCode();
                    if (ProjectDetails != null)
                    hashCode = hashCode * 59 + ProjectDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TalentRequestDetails left, TalentRequestDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TalentRequestDetails left, TalentRequestDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
