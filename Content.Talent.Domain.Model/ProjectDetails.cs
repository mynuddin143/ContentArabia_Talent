/*
 *  CAPD 1 - Talent Registration
 *
 * This document contains the specification of the Talent Registration API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using NUnit.Framework;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// to get all Talent project details.
    /// </summary>
    [DataContract]
    public partial class ProjectDetails : IEquatable<ProjectDetails>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PublishedOn
        /// </summary>
        [DataMember(Name="publishedOn")]
        public string PublishedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn")]
        public string CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name="modifiedOn")]
        public string ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields")]
        public List Fields { get; set; }

        /// <summary>
        /// Gets or Sets Covers
        /// </summary>
        [DataMember(Name="covers")]
        public List Covers { get; set; }

        /// <summary>
        /// Gets or Sets MatureContent
        /// </summary>
        [DataMember(Name="matureContent")]
        public string MatureContent { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name="owners")]
        public List Owners { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats")]
        public List Stats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Covers: ").Append(Covers).Append("\n");
            sb.Append("  MatureContent: ").Append(MatureContent).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectDetails)obj);
        }

        /// <summary>
        /// Returns true if ProjectDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PublishedOn == other.PublishedOn ||
                    PublishedOn != null &&
                    PublishedOn.Equals(other.PublishedOn)
                ) && 
                (
                    CreatedOn == other.CreatedOn ||
                    CreatedOn != null &&
                    CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    ModifiedOn == other.ModifiedOn ||
                    ModifiedOn != null &&
                    ModifiedOn.Equals(other.ModifiedOn)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    Fields.Equals(other.Fields)
                ) && 
                (
                    Covers == other.Covers ||
                    Covers != null &&
                    Covers.Equals(other.Covers)
                ) && 
                (
                    MatureContent == other.MatureContent ||
                    MatureContent != null &&
                    MatureContent.Equals(other.MatureContent)
                ) && 
                (
                    Owners == other.Owners ||
                    Owners != null &&
                    Owners.Equals(other.Owners)
                ) && 
                (
                    Stats == other.Stats ||
                    Stats != null &&
                    Stats.Equals(other.Stats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PublishedOn != null)
                    hashCode = hashCode * 59 + PublishedOn.GetHashCode();
                    if (CreatedOn != null)
                    hashCode = hashCode * 59 + CreatedOn.GetHashCode();
                    if (ModifiedOn != null)
                    hashCode = hashCode * 59 + ModifiedOn.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (Covers != null)
                    hashCode = hashCode * 59 + Covers.GetHashCode();
                    if (MatureContent != null)
                    hashCode = hashCode * 59 + MatureContent.GetHashCode();
                    if (Owners != null)
                    hashCode = hashCode * 59 + Owners.GetHashCode();
                    if (Stats != null)
                    hashCode = hashCode * 59 + Stats.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectDetails left, ProjectDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectDetails left, ProjectDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
