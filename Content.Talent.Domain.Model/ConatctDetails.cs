/*
 *  CAPD 1 - Talent Registration
 *
 * This document contains the specification of the Talent Registration API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// to get all Talent contact details.
    /// </summary>
    [DataContract]
    public partial class ConatctDetails : IEquatable<ConatctDetails>
    { 
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [Required]
        [DataMember(Name="emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets PrimarySkill
        /// </summary>
        [Required]
        [DataMember(Name="primarySkill")]
        public string PrimarySkill { get; set; }

        /// <summary>
        /// Gets or Sets PersonalWebsiteUrl
        /// </summary>
        [DataMember(Name="personalWebsiteUrl")]
        public string PersonalWebsiteUrl { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [Required]
        [DataMember(Name="phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [Required]
        [DataMember(Name="timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets ContentlyPortifolioURl
        /// </summary>
        [DataMember(Name="contentlyPortifolioURl")]
        public string ContentlyPortifolioURl { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePhoto
        /// </summary>
        [DataMember(Name="profilePhoto")]
        public string ProfilePhoto { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConatctDetails {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  PrimarySkill: ").Append(PrimarySkill).Append("\n");
            sb.Append("  PersonalWebsiteUrl: ").Append(PersonalWebsiteUrl).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  ContentlyPortifolioURl: ").Append(ContentlyPortifolioURl).Append("\n");
            sb.Append("  ProfilePhoto: ").Append(ProfilePhoto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConatctDetails)obj);
        }

        /// <summary>
        /// Returns true if ConatctDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ConatctDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConatctDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) && 
                (
                    PrimarySkill == other.PrimarySkill ||
                    PrimarySkill != null &&
                    PrimarySkill.Equals(other.PrimarySkill)
                ) && 
                (
                    PersonalWebsiteUrl == other.PersonalWebsiteUrl ||
                    PersonalWebsiteUrl != null &&
                    PersonalWebsiteUrl.Equals(other.PersonalWebsiteUrl)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    TimeZone == other.TimeZone ||
                    TimeZone != null &&
                    TimeZone.Equals(other.TimeZone)
                ) && 
                (
                    ContentlyPortifolioURl == other.ContentlyPortifolioURl ||
                    ContentlyPortifolioURl != null &&
                    ContentlyPortifolioURl.Equals(other.ContentlyPortifolioURl)
                ) && 
                (
                    ProfilePhoto == other.ProfilePhoto ||
                    ProfilePhoto != null &&
                    ProfilePhoto.Equals(other.ProfilePhoto)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                    if (PrimarySkill != null)
                    hashCode = hashCode * 59 + PrimarySkill.GetHashCode();
                    if (PersonalWebsiteUrl != null)
                    hashCode = hashCode * 59 + PersonalWebsiteUrl.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (TimeZone != null)
                    hashCode = hashCode * 59 + TimeZone.GetHashCode();
                    if (ContentlyPortifolioURl != null)
                    hashCode = hashCode * 59 + ContentlyPortifolioURl.GetHashCode();
                    if (ProfilePhoto != null)
                    hashCode = hashCode * 59 + ProfilePhoto.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConatctDetails left, ConatctDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConatctDetails left, ConatctDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
